package dev.vitorsilverio.gbcemu.cpu;

import dev.vitorsilverio.gbcemu.cpu.instructions.*;
import dev.vitorsilverio.gbcemu.cpu.instructions.destinations.*;
import dev.vitorsilverio.gbcemu.cpu.instructions.sources.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * Decoder class is responsible for decoding opcodes and creating the corresponding instruction objects.
 * It contains a map of opcodes to instruction classes and provides a method to decode an opcode into an instruction.
 * <a href="https://gbdev.io/gb-opcodes/optables/">Opcodes</a>
 */
public class Decoder {

    private static final Logger logger = LoggerFactory.getLogger(Decoder.class);

    private final Map<Integer, Instruction> instructionSet = new HashMap<>();


    public Decoder() {

        // Initialize the instruction set with opcodes and their corresponding instruction classes
        instructionSet.put(0x00, NoOperationInstruction.INSTANCE);
        instructionSet.put(0x01, new LoadInstruction(SourceImmediate16bits.INSTANCE, DestinationBC.INSTANCE, 3, 12));
        instructionSet.put(0x02, new LoadInstruction(SourceA.INSTANCE, DestinationReferenceBC.INSTANCE, 1, 8));
        instructionSet.put(0x03, new IncrementInstruction(SourceBC.INSTANCE, DestinationBC.INSTANCE, 8, false));
        instructionSet.put(0x04, new IncrementInstruction(SourceB.INSTANCE, DestinationB.INSTANCE, 4, true));
        instructionSet.put(0x05, new DecrementInstruction(SourceB.INSTANCE, DestinationB.INSTANCE, 4, true));
        instructionSet.put(0x06, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationB.INSTANCE, 2, 8));
        instructionSet.put(0x07, new RotateInstruction(RotateDirection.LEFT, SourceA.INSTANCE, DestinationA.INSTANCE, 4, true, false, false));
        instructionSet.put(0x08, new LoadInstruction(SourceSP.INSTANCE, DestinationReference16bits.INSTANCE, 3, 20));
        instructionSet.put(0x09, new AdditionInstruction(SourceBC.INSTANCE, SourceHL.INSTANCE, DestinationHL.INSTANCE));
        instructionSet.put(0x0A, new LoadInstruction(SourceReferenceBC.INSTANCE, DestinationA.INSTANCE, 1, 8));
        instructionSet.put(0x0B, new DecrementInstruction(SourceBC.INSTANCE, DestinationBC.INSTANCE, 8, false));
        instructionSet.put(0x0C, new IncrementInstruction(SourceC.INSTANCE, DestinationC.INSTANCE, 4, true));
        instructionSet.put(0x0D, new DecrementInstruction(SourceC.INSTANCE, DestinationC.INSTANCE, 4, true));
        instructionSet.put(0x0E, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationC.INSTANCE, 2, 8));
        instructionSet.put(0x0F, new RotateInstruction(RotateDirection.RIGHT, SourceA.INSTANCE, DestinationA.INSTANCE, 4, true, false, false));
        instructionSet.put(0x10, StopInstruction.INSTANCE);
        instructionSet.put(0x11, new LoadInstruction(SourceImmediate16bits.INSTANCE, DestinationDE.INSTANCE, 3, 12));
        instructionSet.put(0x12, new LoadInstruction(SourceA.INSTANCE, DestinationReferenceDE.INSTANCE, 1, 8));
        instructionSet.put(0x13, new IncrementInstruction(SourceDE.INSTANCE, DestinationDE.INSTANCE, 8, false));
        instructionSet.put(0x14, new IncrementInstruction(SourceD.INSTANCE, DestinationD.INSTANCE, 4, true));
        instructionSet.put(0x15, new DecrementInstruction(SourceD.INSTANCE, DestinationD.INSTANCE, 4, true));
        instructionSet.put(0x16, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationD.INSTANCE, 2, 8));
        instructionSet.put(0x17, RotateLeftRegisterAThroughCarryInstruction.INSTANCE);
        instructionSet.put(0x18, new JumpInstruction(SourceImmediate8Bits.INSTANCE, 3, 12, true));
        instructionSet.put(0x19, new AdditionInstruction(SourceDE.INSTANCE, SourceHL.INSTANCE, DestinationHL.INSTANCE));
        instructionSet.put(0x1A, new LoadInstruction(SourceReferenceDE.INSTANCE, DestinationA.INSTANCE, 1, 8));
        instructionSet.put(0x1B, new DecrementInstruction(SourceDE.INSTANCE, DestinationDE.INSTANCE, 8, false));
        instructionSet.put(0x1C, new IncrementInstruction(SourceE.INSTANCE, DestinationE.INSTANCE, 4, true));
        instructionSet.put(0x1D, new DecrementInstruction(SourceE.INSTANCE, DestinationE.INSTANCE, 4, true));
        instructionSet.put(0x1E, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationE.INSTANCE, 2, 8));
        instructionSet.put(0x1F, RotateRightRegisterAThroughCarryInstruction.INSTANCE);
        instructionSet.put(0x20, new JumpInstruction(Condition.NOT_ZERO, SourceImmediate8Bits.INSTANCE, 2, 12,8, true));
        instructionSet.put(0x21, new LoadInstruction(SourceImmediate16bits.INSTANCE, DestinationHL.INSTANCE, 3, 12));
        instructionSet.put(0x22, new LoadInstruction(SourceA.INSTANCE, DestinationReferenceHL.INSTANCE_INCREMENT, 1, 8));
        instructionSet.put(0x23, new IncrementInstruction(SourceHL.INSTANCE, DestinationHL.INSTANCE, 8, false));
        instructionSet.put(0x24, new IncrementInstruction(SourceH.INSTANCE, DestinationH.INSTANCE, 4, true));
        instructionSet.put(0x25, new DecrementInstruction(SourceH.INSTANCE, DestinationH.INSTANCE, 4, true));
        instructionSet.put(0x26, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationH.INSTANCE, 2, 8));
        instructionSet.put(0x27, DecimalAdjustInstruction.INSTANCE);
        instructionSet.put(0x28, new JumpInstruction(Condition.ZERO, SourceImmediate8Bits.INSTANCE, 2, 12,8, true));
        instructionSet.put(0x29, new AdditionInstruction(SourceHL.INSTANCE, SourceHL.INSTANCE, DestinationHL.INSTANCE));
        instructionSet.put(0x2A, new LoadInstruction(SourceReferenceHL.INSTANCE_INCREMENT, DestinationA.INSTANCE, 1, 8));
        instructionSet.put(0x2B, new DecrementInstruction(SourceHL.INSTANCE, DestinationHL.INSTANCE, 8, false));
        instructionSet.put(0x2C, new IncrementInstruction(SourceL.INSTANCE, DestinationL.INSTANCE, 4, true));
        instructionSet.put(0x2D, new DecrementInstruction(SourceL.INSTANCE, DestinationL.INSTANCE, 4, true));
        instructionSet.put(0x2E, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationL.INSTANCE, 2, 8));
        instructionSet.put(0x2F, ComplementInstruction.INSTANCE);
        instructionSet.put(0x30, new JumpInstruction(Condition.NOT_CARRY, SourceImmediate8Bits.INSTANCE, 2, 12,8, true));
        instructionSet.put(0x31, new LoadInstruction(SourceImmediate16bits.INSTANCE, DestinationSP.INSTANCE, 3, 12));
        instructionSet.put(0x32, new LoadInstruction(SourceA.INSTANCE, DestinationReferenceHL.INSTANCE_DECREMENT, 1, 8));
        instructionSet.put(0x33, new IncrementInstruction(SourceSP.INSTANCE, DestinationSP.INSTANCE, 8, false));
        instructionSet.put(0x34, new IncrementInstruction(SourceHL.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 8, false));
        instructionSet.put(0x35, new DecrementInstruction(SourceHL.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 8, false));
        instructionSet.put(0x36, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 2, 12));
        instructionSet.put(0x37, CarryFlagInstruction.INSTANCE);
        instructionSet.put(0x38, new JumpInstruction(Condition.CARRY, SourceImmediate8Bits.INSTANCE, 2, 12,8, true));
        instructionSet.put(0x39, new AdditionInstruction(SourceSP.INSTANCE, SourceHL.INSTANCE, DestinationHL.INSTANCE));
        instructionSet.put(0x3A, new LoadInstruction(SourceReferenceHL.INSTANCE_DECREMENT, DestinationA.INSTANCE, 1, 8));
        instructionSet.put(0x3B, new DecrementInstruction(SourceSP.INSTANCE, DestinationSP.INSTANCE, 8, false));
        instructionSet.put(0x3C, new IncrementInstruction(SourceA.INSTANCE, DestinationA.INSTANCE, 4, true));
        instructionSet.put(0x3D, new DecrementInstruction(SourceA.INSTANCE, DestinationA.INSTANCE, 4, true));
        instructionSet.put(0x3E, new LoadInstruction(SourceImmediate8Bits.INSTANCE, DestinationA.INSTANCE, 2, 8));
        instructionSet.put(0x3F, ComplementCarryInstruction.INSTANCE);
        instructionSet.put(0x40, new LoadInstruction(SourceB.INSTANCE, DestinationB.INSTANCE, 1, 4));
        instructionSet.put(0x41, new LoadInstruction(SourceC.INSTANCE, DestinationB.INSTANCE, 1, 4));
        instructionSet.put(0x42, new LoadInstruction(SourceD.INSTANCE, DestinationB.INSTANCE, 1, 4));
        instructionSet.put(0x43, new LoadInstruction(SourceE.INSTANCE, DestinationB.INSTANCE, 1, 4));
        instructionSet.put(0x44, new LoadInstruction(SourceH.INSTANCE, DestinationB.INSTANCE, 1, 4));
        instructionSet.put(0x45, new LoadInstruction(SourceL.INSTANCE, DestinationB.INSTANCE, 1, 4));
        instructionSet.put(0x46, new LoadInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationB.INSTANCE, 1, 8));
        instructionSet.put(0x47, new LoadInstruction(SourceA.INSTANCE, DestinationB.INSTANCE, 1, 4));
        instructionSet.put(0x48, new LoadInstruction(SourceB.INSTANCE, DestinationC.INSTANCE, 1, 4));
        instructionSet.put(0x49, new LoadInstruction(SourceC.INSTANCE, DestinationC.INSTANCE, 1, 4));
        instructionSet.put(0x4A, new LoadInstruction(SourceD.INSTANCE, DestinationC.INSTANCE, 1, 4));
        instructionSet.put(0x4B, new LoadInstruction(SourceE.INSTANCE, DestinationC.INSTANCE, 1, 4));
        instructionSet.put(0x4C, new LoadInstruction(SourceH.INSTANCE, DestinationC.INSTANCE, 1, 4));
        instructionSet.put(0x4D, new LoadInstruction(SourceL.INSTANCE, DestinationC.INSTANCE, 1, 4));
        instructionSet.put(0x4E, new LoadInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationC.INSTANCE, 1, 8));
        instructionSet.put(0x4F, new LoadInstruction(SourceA.INSTANCE, DestinationC.INSTANCE, 1, 4));
        instructionSet.put(0x50, new LoadInstruction(SourceB.INSTANCE, DestinationD.INSTANCE, 1, 4));
        instructionSet.put(0x51, new LoadInstruction(SourceC.INSTANCE, DestinationD.INSTANCE, 1, 4));
        instructionSet.put(0x52, new LoadInstruction(SourceD.INSTANCE, DestinationD.INSTANCE, 1, 4));
        instructionSet.put(0x53, new LoadInstruction(SourceE.INSTANCE, DestinationD.INSTANCE, 1, 4));
        instructionSet.put(0x54, new LoadInstruction(SourceH.INSTANCE, DestinationD.INSTANCE, 1, 4));
        instructionSet.put(0x55, new LoadInstruction(SourceL.INSTANCE, DestinationD.INSTANCE, 1, 4));
        instructionSet.put(0x56, new LoadInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationD.INSTANCE, 1, 8));
        instructionSet.put(0x57, new LoadInstruction(SourceA.INSTANCE, DestinationD.INSTANCE, 1, 4));
        instructionSet.put(0x58, new LoadInstruction(SourceB.INSTANCE, DestinationE.INSTANCE, 1, 4));
        instructionSet.put(0x59, new LoadInstruction(SourceC.INSTANCE, DestinationE.INSTANCE, 1, 4));
        instructionSet.put(0x5A, new LoadInstruction(SourceD.INSTANCE, DestinationE.INSTANCE, 1, 4));
        instructionSet.put(0x5B, new LoadInstruction(SourceE.INSTANCE, DestinationE.INSTANCE, 1, 4));
        instructionSet.put(0x5C, new LoadInstruction(SourceH.INSTANCE, DestinationE.INSTANCE, 1, 4));
        instructionSet.put(0x5D, new LoadInstruction(SourceL.INSTANCE, DestinationE.INSTANCE, 1, 4));
        instructionSet.put(0x5E, new LoadInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationE.INSTANCE, 1, 8));
        instructionSet.put(0x5F, new LoadInstruction(SourceA.INSTANCE, DestinationE.INSTANCE, 1, 4));
        instructionSet.put(0x60, new LoadInstruction(SourceB.INSTANCE, DestinationH.INSTANCE, 1, 4));
        instructionSet.put(0x61, new LoadInstruction(SourceC.INSTANCE, DestinationH.INSTANCE, 1, 4));
        instructionSet.put(0x62, new LoadInstruction(SourceD.INSTANCE, DestinationH.INSTANCE, 1, 4));
        instructionSet.put(0x63, new LoadInstruction(SourceE.INSTANCE, DestinationH.INSTANCE, 1, 4));
        instructionSet.put(0x64, new LoadInstruction(SourceH.INSTANCE, DestinationH.INSTANCE, 1, 4));
        instructionSet.put(0x65, new LoadInstruction(SourceL.INSTANCE, DestinationH.INSTANCE, 1, 4));
        instructionSet.put(0x66, new LoadInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationH.INSTANCE, 1, 8));
        instructionSet.put(0x67, new LoadInstruction(SourceA.INSTANCE, DestinationH.INSTANCE, 1, 4));
        instructionSet.put(0x68, new LoadInstruction(SourceB.INSTANCE, DestinationL.INSTANCE, 1, 4));
        instructionSet.put(0x69, new LoadInstruction(SourceC.INSTANCE, DestinationL.INSTANCE, 1, 4));
        instructionSet.put(0x6A, new LoadInstruction(SourceD.INSTANCE, DestinationL.INSTANCE, 1, 4));
        instructionSet.put(0x6B, new LoadInstruction(SourceE.INSTANCE, DestinationL.INSTANCE, 1, 4));
        instructionSet.put(0x6C, new LoadInstruction(SourceH.INSTANCE, DestinationL.INSTANCE, 1, 4));
        instructionSet.put(0x6D, new LoadInstruction(SourceL.INSTANCE, DestinationL.INSTANCE, 1, 4));
        instructionSet.put(0x6E, new LoadInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationL.INSTANCE, 1, 8));
        instructionSet.put(0x6F, new LoadInstruction(SourceA.INSTANCE, DestinationL.INSTANCE, 1, 4));
        instructionSet.put(0x70, new LoadInstruction(SourceB.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 1, 8));
        instructionSet.put(0x71, new LoadInstruction(SourceC.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 1, 8));
        instructionSet.put(0x72, new LoadInstruction(SourceD.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 1, 8));
        instructionSet.put(0x73, new LoadInstruction(SourceE.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 1, 8));
        instructionSet.put(0x74, new LoadInstruction(SourceH.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 1, 8));
        instructionSet.put(0x75, new LoadInstruction(SourceL.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 1, 8));
        instructionSet.put(0x76, HaltInstruction.INSTANCE);
        instructionSet.put(0x77, new LoadInstruction(SourceA.INSTANCE, DestinationReferenceHL.INSTANCE_DEFAULT, 1, 8));
        instructionSet.put(0x78, new LoadInstruction(SourceB.INSTANCE, DestinationA.INSTANCE, 1, 4));
        instructionSet.put(0x79, new LoadInstruction(SourceC.INSTANCE, DestinationA.INSTANCE, 1, 4));
        instructionSet.put(0x7A, new LoadInstruction(SourceD.INSTANCE, DestinationA.INSTANCE, 1, 4));
        instructionSet.put(0x7B, new LoadInstruction(SourceE.INSTANCE, DestinationA.INSTANCE, 1, 4));
        instructionSet.put(0x7C, new LoadInstruction(SourceH.INSTANCE, DestinationA.INSTANCE, 1, 4));
        instructionSet.put(0x7D, new LoadInstruction(SourceL.INSTANCE, DestinationA.INSTANCE, 1, 4));
        instructionSet.put(0x7E, new LoadInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationA.INSTANCE, 1, 8));
        instructionSet.put(0x7F, new LoadInstruction(SourceA.INSTANCE, DestinationA.INSTANCE, 1, 4));
        instructionSet.put(0x80, new AdditionInstruction(SourceB.INSTANCE, 4, false));
        instructionSet.put(0x81, new AdditionInstruction(SourceC.INSTANCE, 4, false));
        instructionSet.put(0x82, new AdditionInstruction(SourceD.INSTANCE, 4, false));
        instructionSet.put(0x83, new AdditionInstruction(SourceE.INSTANCE, 4, false));
        instructionSet.put(0x84, new AdditionInstruction(SourceH.INSTANCE, 4, false));
        instructionSet.put(0x85, new AdditionInstruction(SourceL.INSTANCE, 4, false));
        instructionSet.put(0x86, new AdditionInstruction(SourceReferenceHL.INSTANCE_DEFAULT, 8, false));
        instructionSet.put(0x87, new AdditionInstruction(SourceA.INSTANCE, 4, false));
        instructionSet.put(0x88, new AdditionInstruction(SourceB.INSTANCE, 4, true));
        instructionSet.put(0x89, new AdditionInstruction(SourceC.INSTANCE, 4, true));
        instructionSet.put(0x8A, new AdditionInstruction(SourceD.INSTANCE, 4, true));
        instructionSet.put(0x8B, new AdditionInstruction(SourceE.INSTANCE, 4, true));
        instructionSet.put(0x8C, new AdditionInstruction(SourceH.INSTANCE, 4, true));
        instructionSet.put(0x8D, new AdditionInstruction(SourceL.INSTANCE, 4, true));
        instructionSet.put(0x8E, new AdditionInstruction(SourceReferenceHL.INSTANCE_DEFAULT, 8, true));
        instructionSet.put(0x8F, new AdditionInstruction(SourceA.INSTANCE, 4, true));
        instructionSet.put(0x90, new SubtractionInstruction(SourceB.INSTANCE, 4, false));
        instructionSet.put(0x91, new SubtractionInstruction(SourceC.INSTANCE, 4, false));
        instructionSet.put(0x92, new SubtractionInstruction(SourceD.INSTANCE, 4, false));
        instructionSet.put(0x93, new SubtractionInstruction(SourceE.INSTANCE, 4, false));
        instructionSet.put(0x94, new SubtractionInstruction(SourceH.INSTANCE, 4, false));
        instructionSet.put(0x95, new SubtractionInstruction(SourceL.INSTANCE, 4, false));
        instructionSet.put(0x96, new SubtractionInstruction(SourceReferenceHL.INSTANCE_DEFAULT, 8, false));
        instructionSet.put(0x97, new SubtractionInstruction(SourceA.INSTANCE, 4, false));
        instructionSet.put(0x98, new SubtractionInstruction(SourceB.INSTANCE, 4, true));
        instructionSet.put(0x99, new SubtractionInstruction(SourceC.INSTANCE, 4, true));
        instructionSet.put(0x9A, new SubtractionInstruction(SourceD.INSTANCE, 4, true));
        instructionSet.put(0x9B, new SubtractionInstruction(SourceE.INSTANCE, 4, true));
        instructionSet.put(0x9C, new SubtractionInstruction(SourceH.INSTANCE, 4, true));
        instructionSet.put(0x9D, new SubtractionInstruction(SourceL.INSTANCE, 4, true));
        instructionSet.put(0x9E, new SubtractionInstruction(SourceReferenceHL.INSTANCE_DEFAULT, 8, true));
        instructionSet.put(0x9F, new SubtractionInstruction(SourceA.INSTANCE, 4, true));
        instructionSet.put(0xA0, new LogicalInstruction(LogicalOperation.AND, SourceB.INSTANCE, 4));
        instructionSet.put(0xA1, new LogicalInstruction(LogicalOperation.AND, SourceC.INSTANCE, 4));
        instructionSet.put(0xA2, new LogicalInstruction(LogicalOperation.AND, SourceD.INSTANCE, 4));
        instructionSet.put(0xA3, new LogicalInstruction(LogicalOperation.AND, SourceE.INSTANCE, 4));
        instructionSet.put(0xA4, new LogicalInstruction(LogicalOperation.AND, SourceH.INSTANCE, 4));
        instructionSet.put(0xA5, new LogicalInstruction(LogicalOperation.AND, SourceL.INSTANCE, 4));
        instructionSet.put(0xA6, new LogicalInstruction(LogicalOperation.AND, SourceReferenceHL.INSTANCE_DEFAULT, 8));
        instructionSet.put(0xA7, new LogicalInstruction(LogicalOperation.AND, SourceA.INSTANCE, 4));
        instructionSet.put(0xA8, new LogicalInstruction(LogicalOperation.XOR, SourceB.INSTANCE, 4));
        instructionSet.put(0xA9, new LogicalInstruction(LogicalOperation.XOR, SourceC.INSTANCE, 4));
        instructionSet.put(0xAA, new LogicalInstruction(LogicalOperation.XOR, SourceD.INSTANCE, 4));
        instructionSet.put(0xAB, new LogicalInstruction(LogicalOperation.XOR, SourceE.INSTANCE, 4));
        instructionSet.put(0xAC, new LogicalInstruction(LogicalOperation.XOR, SourceH.INSTANCE, 4));
        instructionSet.put(0xAD, new LogicalInstruction(LogicalOperation.XOR, SourceL.INSTANCE, 4));
        instructionSet.put(0xAE, new LogicalInstruction(LogicalOperation.XOR, SourceReferenceHL.INSTANCE_DEFAULT, 8));
        instructionSet.put(0xAF, new LogicalInstruction(LogicalOperation.XOR, SourceA.INSTANCE, 4));
        instructionSet.put(0xB0, new LogicalInstruction(LogicalOperation.OR, SourceB.INSTANCE, 4));
        instructionSet.put(0xB1, new LogicalInstruction(LogicalOperation.OR, SourceC.INSTANCE, 4));
        instructionSet.put(0xB2, new LogicalInstruction(LogicalOperation.OR, SourceD.INSTANCE, 4));
        instructionSet.put(0xB3, new LogicalInstruction(LogicalOperation.OR, SourceE.INSTANCE, 4));
        instructionSet.put(0xB4, new LogicalInstruction(LogicalOperation.OR, SourceH.INSTANCE, 4));
        instructionSet.put(0xB5, new LogicalInstruction(LogicalOperation.OR, SourceL.INSTANCE, 4));
        instructionSet.put(0xB6, new LogicalInstruction(LogicalOperation.OR, SourceReferenceHL.INSTANCE_DEFAULT, 8));
        instructionSet.put(0xB7, new LogicalInstruction(LogicalOperation.OR, SourceA.INSTANCE, 4));
        instructionSet.put(0xB8, new CompareInstruction(SourceB.INSTANCE, 4));
        instructionSet.put(0xB9, new CompareInstruction(SourceC.INSTANCE, 4));
        instructionSet.put(0xBA, new CompareInstruction(SourceD.INSTANCE, 4));
        instructionSet.put(0xBB, new CompareInstruction(SourceE.INSTANCE, 4));
        instructionSet.put(0xBC, new CompareInstruction(SourceH.INSTANCE, 4));
        instructionSet.put(0xBD, new CompareInstruction(SourceL.INSTANCE, 4));
        instructionSet.put(0xBE, new CompareInstruction(SourceReferenceHL.INSTANCE_DEFAULT, 8));
        instructionSet.put(0xBF, new CompareInstruction(SourceA.INSTANCE, 4));
        instructionSet.put(0xC0, new ReturnInstruction(Condition.NOT_ZERO, 12, 8));
        instructionSet.put(0xC1, new PopInstruction(DestinationBC.INSTANCE));
        instructionSet.put(0xC2, new JumpInstruction(Condition.NOT_ZERO, SourceImmediate16bits.INSTANCE, 3, 16, 12, false));
        instructionSet.put(0xC3, new JumpInstruction(SourceImmediate16bits.INSTANCE, 3, 16, false));
        instructionSet.put(0xC4, new CallInstruction(Condition.NOT_ZERO, SourceImmediate16bits.INSTANCE, 24, 12));
        instructionSet.put(0xC5, new PushInstruction(SourceBC.INSTANCE));
        instructionSet.put(0xC6, new AdditionInstruction(SourceImmediate8Bits.INSTANCE, 8, false));
        instructionSet.put(0xC7, new ResetInstruction(0));
        instructionSet.put(0xC8, new ReturnInstruction(Condition.ZERO, 12, 8));
        instructionSet.put(0xC9, new ReturnInstruction(16, false));
        instructionSet.put(0xCA, new JumpInstruction(Condition.ZERO, SourceImmediate16bits.INSTANCE, 3, 16, 12, false));
        instructionSet.put(0xCC, new CallInstruction(Condition.ZERO, SourceImmediate16bits.INSTANCE, 24, 12));
        instructionSet.put(0xCD, new CallInstruction(SourceImmediate16bits.INSTANCE, 24));
        instructionSet.put(0xCE, new AdditionInstruction(SourceImmediate8Bits.INSTANCE, 8, true));
        instructionSet.put(0xCF, new ResetInstruction(8));
        instructionSet.put(0xD0, new ReturnInstruction(Condition.NOT_CARRY, 12, 8));
        instructionSet.put(0xD1, new PopInstruction(DestinationDE.INSTANCE));
        instructionSet.put(0xD2, new JumpInstruction(Condition.NOT_CARRY, SourceImmediate16bits.INSTANCE, 3, 16, 12, false));
        instructionSet.put(0xD4, new CallInstruction(Condition.NOT_CARRY, SourceImmediate16bits.INSTANCE, 24, 12));
        instructionSet.put(0xD5, new PushInstruction(SourceDE.INSTANCE));
        instructionSet.put(0xD6, new SubtractionInstruction(SourceImmediate8Bits.INSTANCE, 8, false));
        instructionSet.put(0xD7, new ResetInstruction(0x10));
        instructionSet.put(0xD8, new ReturnInstruction(Condition.CARRY, 12, 8));
        instructionSet.put(0xD9, new ReturnInstruction(16, true));
        instructionSet.put(0xDA, new JumpInstruction(Condition.CARRY, SourceImmediate16bits.INSTANCE, 3, 16, 12, false));
        instructionSet.put(0xDC, new CallInstruction(Condition.CARRY, SourceImmediate16bits.INSTANCE, 24, 12));
        instructionSet.put(0xDE, new SubtractionInstruction(SourceImmediate8Bits.INSTANCE, 8, true));
        instructionSet.put(0xDF, new ResetInstruction(0x18));
        instructionSet.put(0xE0, new LoadInstruction(SourceA.INSTANCE, DestinationHighReference8bits.INSTANCE, 2, 12));
        instructionSet.put(0xE1, new PopInstruction(DestinationHL.INSTANCE));
        instructionSet.put(0xE2, new LoadInstruction(SourceA.INSTANCE, DestinationHighReferenceC.INSTANCE, 1, 8));
        instructionSet.put(0xE5, new PushInstruction(SourceHL.INSTANCE));
        instructionSet.put(0xE6, new LogicalInstruction(LogicalOperation.AND, SourceImmediate8Bits.INSTANCE, 2, 8));
        instructionSet.put(0xE7, new ResetInstruction(0x20));
        instructionSet.put(0xE8, new AdditionInstruction(SourceSP.INSTANCE, SourceImmediate8Bits.INSTANCE, DestinationSP.INSTANCE, 2, 16, false, false));
        instructionSet.put(0xE9, new JumpInstruction(SourceHL.INSTANCE, 1, 4, false));
        instructionSet.put(0xEA, new LoadInstruction(SourceA.INSTANCE, DestinationReference16bits.INSTANCE, 3, 16));
        instructionSet.put(0xEE, new LogicalInstruction(LogicalOperation.XOR, SourceImmediate8Bits.INSTANCE, 2, 8));
        instructionSet.put(0xEF, new ResetInstruction(0x28));
        instructionSet.put(0xF0, new LoadInstruction(SourceHighReference8bits.INSTANCE, DestinationA.INSTANCE, 2, 12));
        instructionSet.put(0xF1, new PopInstruction(DestinationAF.INSTANCE));
        instructionSet.put(0xF2, new LoadInstruction(SourceHighReferenceC.INSTANCE, DestinationA.INSTANCE, 1, 8));
        instructionSet.put(0xF3, DisableInterruptsInstruction.INSTANCE);
        instructionSet.put(0xF5, new PushInstruction(SourceAF.INSTANCE));
        instructionSet.put(0xF6, new LogicalInstruction(LogicalOperation.OR, SourceImmediate8Bits.INSTANCE, 2, 8));
        instructionSet.put(0xF7, new ResetInstruction(0x30));
        instructionSet.put(0xF8, new AdditionInstruction(SourceSP.INSTANCE, SourceImmediate8Bits.INSTANCE, DestinationHL.INSTANCE, 2, 12, true, false));
        instructionSet.put(0xF9, new LoadInstruction(SourceHL.INSTANCE, DestinationSP.INSTANCE, 1, 8));
        instructionSet.put(0xFA, new LoadInstruction(SourceReference16bits.INSTANCE, DestinationA.INSTANCE, 3, 16));
        instructionSet.put(0xFB, EnableInterruptsInstruction.INSTANCE);
        instructionSet.put(0xFE, new CompareInstruction(SourceImmediate8Bits.INSTANCE, 2, 8));
        instructionSet.put(0xFF, new ResetInstruction(0x38));
        instructionSet.put(0xCB01, new RotateInstruction(RotateDirection.LEFT, SourceB.INSTANCE, DestinationB.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB02, new RotateInstruction(RotateDirection.LEFT, SourceC.INSTANCE, DestinationC.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB03, new RotateInstruction(RotateDirection.LEFT, SourceD.INSTANCE, DestinationD.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB04, new RotateInstruction(RotateDirection.LEFT, SourceE.INSTANCE, DestinationE.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB05, new RotateInstruction(RotateDirection.LEFT, SourceH.INSTANCE, DestinationH.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB06, new RotateInstruction(RotateDirection.LEFT, SourceL.INSTANCE, DestinationL.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB07, new RotateInstruction(RotateDirection.LEFT, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16, false, true, false));
        instructionSet.put(0xCB08, new RotateInstruction(RotateDirection.RIGHT, SourceB.INSTANCE, DestinationB.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB09, new RotateInstruction(RotateDirection.RIGHT, SourceC.INSTANCE, DestinationC.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB0A, new RotateInstruction(RotateDirection.RIGHT, SourceD.INSTANCE, DestinationD.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB0B, new RotateInstruction(RotateDirection.RIGHT, SourceE.INSTANCE, DestinationE.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB0C, new RotateInstruction(RotateDirection.RIGHT, SourceH.INSTANCE, DestinationH.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB0D, new RotateInstruction(RotateDirection.RIGHT, SourceL.INSTANCE, DestinationL.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB0E, new RotateInstruction(RotateDirection.RIGHT, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16, false, true, false));
        instructionSet.put(0xCB0F, new RotateInstruction(RotateDirection.RIGHT, SourceA.INSTANCE, DestinationA.INSTANCE, 8, false, true, false));
        instructionSet.put(0xCB10, new RotateInstruction(RotateDirection.LEFT, SourceB.INSTANCE, DestinationB.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB11, new RotateInstruction(RotateDirection.LEFT, SourceC.INSTANCE, DestinationC.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB12, new RotateInstruction(RotateDirection.LEFT, SourceD.INSTANCE, DestinationD.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB13, new RotateInstruction(RotateDirection.LEFT, SourceE.INSTANCE, DestinationE.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB14, new RotateInstruction(RotateDirection.LEFT, SourceH.INSTANCE, DestinationH.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB15, new RotateInstruction(RotateDirection.LEFT, SourceL.INSTANCE, DestinationL.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB16, new RotateInstruction(RotateDirection.LEFT, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16, false, true, true));
        instructionSet.put(0xCB17, new RotateInstruction(RotateDirection.LEFT, SourceA.INSTANCE, DestinationA.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB18, new RotateInstruction(RotateDirection.RIGHT, SourceB.INSTANCE, DestinationB.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB19, new RotateInstruction(RotateDirection.RIGHT, SourceC.INSTANCE, DestinationC.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB1A, new RotateInstruction(RotateDirection.RIGHT, SourceD.INSTANCE, DestinationD.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB1B, new RotateInstruction(RotateDirection.RIGHT, SourceE.INSTANCE, DestinationE.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB1C, new RotateInstruction(RotateDirection.RIGHT, SourceH.INSTANCE, DestinationH.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB1D, new RotateInstruction(RotateDirection.RIGHT, SourceL.INSTANCE, DestinationL.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB1E, new RotateInstruction(RotateDirection.RIGHT, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16, false, true, true));
        instructionSet.put(0xCB1F, new RotateInstruction(RotateDirection.RIGHT, SourceA.INSTANCE, DestinationA.INSTANCE, 8, false, true, true));
        instructionSet.put(0xCB20, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCB21, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCB22, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCB23, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCB24, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCB25, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCB26, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB27, new ShiftArithmeticallyInstruction(RotateDirection.LEFT, SourceA.INSTANCE, DestinationA.INSTANCE, 8, true));
        instructionSet.put(0xCB28, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceB.INSTANCE, DestinationB.INSTANCE, 8, true));
        instructionSet.put(0xCB29, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceC.INSTANCE, DestinationC.INSTANCE, 8, true));
        instructionSet.put(0xCB2A, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceD.INSTANCE, DestinationD.INSTANCE, 8, true));
        instructionSet.put(0xCB2B, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceE.INSTANCE, DestinationE.INSTANCE, 8, true));
        instructionSet.put(0xCB2C, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceH.INSTANCE, DestinationH.INSTANCE, 8, true));
        instructionSet.put(0xCB2D, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceL.INSTANCE, DestinationL.INSTANCE, 8, true));
        instructionSet.put(0xCB2E, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16, true));
        instructionSet.put(0xCB2F, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceA.INSTANCE, DestinationA.INSTANCE, 8, true));
        instructionSet.put(0xCB30, new SwapInstruction(SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCB31, new SwapInstruction(SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCB32, new SwapInstruction(SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCB33, new SwapInstruction(SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCB34, new SwapInstruction(SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCB35, new SwapInstruction(SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCB36, new SwapInstruction(SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB37, new SwapInstruction(SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCB38, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCB39, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCB3A, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCB3B, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCB3C, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCB3D, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCB3E, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB3F, new ShiftArithmeticallyInstruction(RotateDirection.RIGHT, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCB40, new BitInstruction(0, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB41, new BitInstruction(0, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB42, new BitInstruction(0, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB43, new BitInstruction(0, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB44, new BitInstruction(0, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB45, new BitInstruction(0, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB46, new BitInstruction(0, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB47, new BitInstruction(0, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB48, new BitInstruction(1, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB49, new BitInstruction(1, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB4A, new BitInstruction(1, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB4B, new BitInstruction(1, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB4C, new BitInstruction(1, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB4D, new BitInstruction(1, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB4E, new BitInstruction(1, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB4F, new BitInstruction(1, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB50, new BitInstruction(2, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB51, new BitInstruction(2, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB52, new BitInstruction(2, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB53, new BitInstruction(2, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB54, new BitInstruction(2, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB55, new BitInstruction(2, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB56, new BitInstruction(2, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB57, new BitInstruction(2, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB58, new BitInstruction(3, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB59, new BitInstruction(3, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB5A, new BitInstruction(3, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB5B, new BitInstruction(3, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB5C, new BitInstruction(3, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB5D, new BitInstruction(3, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB5E, new BitInstruction(3, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB5F, new BitInstruction(3, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB60, new BitInstruction(4, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB61, new BitInstruction(4, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB62, new BitInstruction(4, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB63, new BitInstruction(4, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB64, new BitInstruction(4, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB65, new BitInstruction(4, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB66, new BitInstruction(4, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB67, new BitInstruction(4, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB68, new BitInstruction(5, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB69, new BitInstruction(5, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB6A, new BitInstruction(5, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB6B, new BitInstruction(5, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB6C, new BitInstruction(5, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB6D, new BitInstruction(5, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB6E, new BitInstruction(5, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB6F, new BitInstruction(5, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB70, new BitInstruction(6, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB71, new BitInstruction(6, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB72, new BitInstruction(6, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB73, new BitInstruction(6, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB74, new BitInstruction(6, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB75, new BitInstruction(6, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB76, new BitInstruction(6, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB77, new BitInstruction(6, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB78, new BitInstruction(7, SourceB.INSTANCE, 8));
        instructionSet.put(0xCB79, new BitInstruction(7, SourceC.INSTANCE, 8));
        instructionSet.put(0xCB7A, new BitInstruction(7, SourceD.INSTANCE, 8));
        instructionSet.put(0xCB7B, new BitInstruction(7, SourceE.INSTANCE, 8));
        instructionSet.put(0xCB7C, new BitInstruction(7, SourceH.INSTANCE, 8));
        instructionSet.put(0xCB7D, new BitInstruction(7, SourceL.INSTANCE, 8));
        instructionSet.put(0xCB7E, new BitInstruction(7, SourceReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB7F, new BitInstruction(7, SourceA.INSTANCE, 8));
        instructionSet.put(0xCB80, new ResInstruction(0, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCB81, new ResInstruction(0, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCB82, new ResInstruction(0, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCB83, new ResInstruction(0, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCB84, new ResInstruction(0, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCB85, new ResInstruction(0, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCB86, new ResInstruction(0, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB87, new ResInstruction(0, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCB88, new ResInstruction(1, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCB89, new ResInstruction(1, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCB8A, new ResInstruction(1, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCB8B, new ResInstruction(1, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCB8C, new ResInstruction(1, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCB8D, new ResInstruction(1, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCB8E, new ResInstruction(1, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB8F, new ResInstruction(1, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCB90, new ResInstruction(2, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCB91, new ResInstruction(2, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCB92, new ResInstruction(2, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCB93, new ResInstruction(2, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCB94, new ResInstruction(2, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCB95, new ResInstruction(2, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCB96, new ResInstruction(2, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB97, new ResInstruction(2, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCB98, new ResInstruction(3, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCB99, new ResInstruction(3, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCB9A, new ResInstruction(3, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCB9B, new ResInstruction(3, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCB9C, new ResInstruction(3, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCB9D, new ResInstruction(3, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCB9E, new ResInstruction(3, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCB9F, new ResInstruction(3, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBA0, new ResInstruction(4, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBA1, new ResInstruction(4, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBA2, new ResInstruction(4, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBA3, new ResInstruction(4, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBA4, new ResInstruction(4, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBA5, new ResInstruction(4, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBA6, new ResInstruction(4, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBA7, new ResInstruction(4, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBA8, new ResInstruction(5, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBA9, new ResInstruction(5, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBAA, new ResInstruction(5, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBAB, new ResInstruction(5, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBAC, new ResInstruction(5, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBAD, new ResInstruction(5, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBAE, new ResInstruction(5, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBAF, new ResInstruction(5, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBB0, new ResInstruction(6, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBB1, new ResInstruction(6, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBB2, new ResInstruction(6, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBB3, new ResInstruction(6, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBB4, new ResInstruction(6, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBB5, new ResInstruction(6, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBB6, new ResInstruction(6, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBB7, new ResInstruction(6, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBB8, new ResInstruction(7, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBB9, new ResInstruction(7, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBBA, new ResInstruction(7, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBBB, new ResInstruction(7, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBBC, new ResInstruction(7, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBBD, new ResInstruction(7, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBBE, new ResInstruction(7, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBBF, new ResInstruction(7, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBC0, new SetInstruction(0, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBC1, new SetInstruction(0, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBC2, new SetInstruction(0, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBC3, new SetInstruction(0, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBC4, new SetInstruction(0, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBC5, new SetInstruction(0, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBC6, new SetInstruction(0, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBC7, new SetInstruction(0, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBC8, new SetInstruction(1, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBC9, new SetInstruction(1, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBCA, new SetInstruction(1, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBCB, new SetInstruction(1, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBCC, new SetInstruction(1, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBCD, new SetInstruction(1, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBCE, new SetInstruction(1, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBCF, new SetInstruction(1, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBD0, new SetInstruction(2, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBD1, new SetInstruction(2, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBD2, new SetInstruction(2, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBD3, new SetInstruction(2, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBD4, new SetInstruction(2, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBD5, new SetInstruction(2, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBD6, new SetInstruction(2, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBD7, new SetInstruction(2, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBD8, new SetInstruction(3, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBD9, new SetInstruction(3, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBDA, new SetInstruction(3, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBDB, new SetInstruction(3, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBDC, new SetInstruction(3, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBDD, new SetInstruction(3, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBDE, new SetInstruction(3, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBDF, new SetInstruction(3, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBE0, new SetInstruction(4, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBE1, new SetInstruction(4, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBE2, new SetInstruction(4, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBE3, new SetInstruction(4, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBE4, new SetInstruction(4, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBE5, new SetInstruction(4, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBE6, new SetInstruction(4, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBE7, new SetInstruction(4, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBE8, new SetInstruction(5, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBE9, new SetInstruction(5, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBEA, new SetInstruction(5, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBEB, new SetInstruction(5, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBEC, new SetInstruction(5, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBED, new SetInstruction(5, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBEE, new SetInstruction(5, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBEF, new SetInstruction(5, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBF0, new SetInstruction(6, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBF1, new SetInstruction(6, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBF2, new SetInstruction(6, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBF3, new SetInstruction(6, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBF4, new SetInstruction(6, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBF5, new SetInstruction(6, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBF6, new SetInstruction(6, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBF7, new SetInstruction(6, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
        instructionSet.put(0xCBF8, new SetInstruction(7, SourceB.INSTANCE, DestinationB.INSTANCE, 8));
        instructionSet.put(0xCBF9, new SetInstruction(7, SourceC.INSTANCE, DestinationC.INSTANCE, 8));
        instructionSet.put(0xCBFA, new SetInstruction(7, SourceD.INSTANCE, DestinationD.INSTANCE, 8));
        instructionSet.put(0xCBFB, new SetInstruction(7, SourceE.INSTANCE, DestinationE.INSTANCE, 8));
        instructionSet.put(0xCBFC, new SetInstruction(7, SourceH.INSTANCE, DestinationH.INSTANCE, 8));
        instructionSet.put(0xCBFD, new SetInstruction(7, SourceL.INSTANCE, DestinationL.INSTANCE, 8));
        instructionSet.put(0xCBFE, new SetInstruction(7, SourceReferenceHL.INSTANCE_DEFAULT, DestinationReferenceHL.INSTANCE_DEFAULT, 16));
        instructionSet.put(0xCBFF, new SetInstruction(7, SourceA.INSTANCE, DestinationA.INSTANCE, 8));
    }


    public Optional<Instruction> decode(int opcode) {
        Instruction instruction = instructionSet.get(opcode);
        if(instruction != null) {
            logger.debug("Decoded instruction: {}", instruction);
            return Optional.of(instruction);
        } else {
            // Handle unknown opcode
            logger.error("Unknown opcode: {}", String.format("0x%02X", opcode));
            return Optional.empty();
        }
    }
}
